# -*- coding: utf-8 -*-
"""RetrievalQA pipeline.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F6_WX7cs94AWaeNeiGfICqIlm61vLaer
"""

!pip install langchain faiss-cpu sentence-transformers pypdf transformers

from google.colab import files
uploaded = files.upload()
pdf_path = list(uploaded.keys())[0]

from langchain_community.document_loaders import PyPDFLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter

loader = PyPDFLoader(pdf_path)
docs = loader.load()

splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=50)
chunks = splitter.split_documents(docs)

print(f"Total chunks created: {len(chunks)}")



!pip install langchain-community pypdf sentence-transformers faiss-cpu transformers

from langchain.embeddings import HuggingFaceEmbeddings
from langchain.vectorstores import FAISS

embedding_model = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")
vectorstore = FAISS.from_documents(chunks, embedding_model)

from transformers import pipeline

generator = pipeline("text2text-generation", model="google/flan-t5-base", device=-1)

from transformers import pipeline

# Load FLAN-T5 model for free text generation
generator = pipeline(
    "text2text-generation",
    model="google/flan-t5-base",
    device=-1  # CPU; set to 0 if you enable GPU in Colab
)

def rag_answer(query, k=3):
    # 1. Retrieve top-k relevant chunks from the vector store
    retrieved_docs = vectorstore.similarity_search(query, k=k)

    # 2. Combine them into a single context string
    context = "\n\n".join([doc.page_content for doc in retrieved_docs])

    # 3. Build the prompt for the model
    prompt = f"Answer the question based only on the context below.\n\nContext:\n{context}\n\nQuestion: {query}\nAnswer:"

    # 4. Generate the answer
    result = generator(prompt, max_length=256, do_sample=True)

    return result[0]["generated_text"], retrieved_docs

rag_answer("What is the refund policy?")
rag_answer("What rules are mentioned in the terms and conditions?")
rag_answer("Are digital products refundable?")